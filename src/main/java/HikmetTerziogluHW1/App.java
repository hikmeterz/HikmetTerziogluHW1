/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package HikmetTerziogluHW1;
import static spark.Spark.get;
import static spark.Spark.port;
import static spark.Spark.post;
import static spark.Spark.port;

//import java.lang.System.Logger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.LogManager;


import spark.ModelAndView;
import spark.template.mustache.MustacheTemplateEngine;



public class App {
    public String getGreeting() {
        return "Hello world.";
    }
    //The method that finds the two numbers given in the parameter in the ArrayList and updates the number given the index.

    //If it does not find any numbers in the ArrayList, it returns false.

    //If it is updated, it will return true.
    //if the index is not in the range of the arraylist length, it returns false.

    public static boolean Add2NumbersAndUpdateIndex(ArrayList<Integer> array,int first,int second,int index){

        int count=0;
        int index1=0;
        int index2=0;
        int update=0;
        if (array == null) return false;

        if(index<0||index>array.size()) return false;

        for(int i=0;i<array.size();i++){
            if(first==array.get(i)){
                count++;
                index1=i;
            }else if(second==array.get(i)){
                count++;
                index2=i;
            }
        }
        if(count==2){
            update=array.get(index1)+array.get(index2);
            array.set(index, update);
            return true;
        }else if(count<2){
            return false;
        }

        return true;
    }
    public static void main(String[] args) {
       // Logger logger = LogManager.getLogger(App.class);
        int port = Integer.parseInt(System.getenv("PORT"));
        port(port);
        //logger.error("Current port number:" + port);

        
        //port(getHerokuAssignedPort());
        
        
        get("/", (req, res) -> "Hello, World!!!");
        
        post("/compute", (req, res) -> {
            //System.out.println(req.queryParams("input1"));
            //System.out.println(req.queryParams("input2"));
            String input1 = req.queryParams("input1");
            java.util.Scanner sc1 = new java.util.Scanner(input1);
            sc1.useDelimiter("[;\r\n]+");
            java.util.ArrayList<Integer> inputList = new java.util.ArrayList<>();
            while (sc1.hasNext())
            {
              int value = Integer.parseInt(sc1.next().replaceAll("\\s",""));
              inputList.add(value);
            }
            sc1.close();
            System.out.println(inputList);

            
            String input2 = req.queryParams("input2").replaceAll("\\s","");
            int input2AsInt = Integer.parseInt(input2);

            String input3 = req.queryParams("input3").replaceAll("\\s","");
            int input3AsInt = Integer.parseInt(input3);

            String input4 = req.queryParams("input4").replaceAll("\\s","");
            int input4AsInt = Integer.parseInt(input4);


            boolean result = App.Add2NumbersAndUpdateIndex(inputList, input2AsInt,input3AsInt,input4AsInt);

            Map<String, Boolean> map = new HashMap<String, Boolean>();
            map.put("result", result);
            return new ModelAndView(map, "compute.mustache");
        }, new MustacheTemplateEngine());

        get("/compute",
            (rq, rs) -> {
              Map<String, String> map = new HashMap<String, String>();
              map.put("result", "not computed yet!");
              return new ModelAndView(map, "compute.mustache");
            },
            new MustacheTemplateEngine());

        
        
       // System.out.println(new App().getGreeting());
    }

/*
    static int getHerokuAssignedPort() {
        ProcessBuilder processBuilder = new ProcessBuilder();
        if (processBuilder.environment().get("PORT") != null) {
            return Integer.parseInt(processBuilder.environment().get("PORT"));
        }
        return 4567; //return default port if heroku-port isn't set (i.e. on localhost)
    }
*/
    
    



}
